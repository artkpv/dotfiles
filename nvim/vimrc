" Name:     (Neo)Vim configuration
" Author:   Artyom K. artyomkarpov [at] gmail [dot] com
" URL:      www.artkpv.net
" Refs:     https://github.com/amix/vimrc
"           https://github.com/ruslanosipov/dotfiles/blob/master/vimrc

" General --------------------------------------------------- {{{1

" Sets how many lines of history VIM has to remember
set history=1000

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","

" Fast saving
nnoremap <C-s> :wa<CR>

" :W sudo saves the file 
" (useful for handling the permission-denied error)
command! W w !sudo tee % > /dev/null

" Use system clipboard
set clipboard=unnamed,unnamedplus

" Cursor movements when wrap is on
" Refs https://vim.fandom.com/wiki/Move_cursor_by_display_lines_when_wrapping
noremap <silent> k gk
noremap <silent> j gj

" Package management --------------------------------------------------- {{{1

set packpath^=~/.config/nvim
packadd minpac

call minpac#init()

" minpac must have {'type': 'opt'} so that it can be loaded with `packadd`.
call minpac#add('k-takata/minpac', {'type': 'opt'})

"
" Add other plugins here.
call minpac#add('junegunn/fzf')
call minpac#add('junegunn/fzf.vim')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('plasticboy/vim-markdown')
call minpac#add('godlygeek/tabular')
call minpac#add('junegunn/goyo.vim')
call minpac#add('rhysd/vim-grammarous')
call minpac#add('flazz/vim-colorschemes')
call minpac#add('vimwiki/vimwiki', {'branch': 'dev'} )
call minpac#add('tpope/vim-obsession')
call minpac#add('tpope/vim-fugitive')

" TODO: consider this: call minpac#add('easymotion/vim-easymotion')
call minpac#add('scrooloose/nerdtree')

call minpac#add('christoomey/vim-tmux-navigator')

call minpac#add('vim-airline/vim-airline')
call minpac#add('sonph/onehalf', {'subdir': 'vim'})
call minpac#add('rakr/vim-one')

" call minpac#add('camspiers/animate.vim')
" call minpac#add('camspiers/lens.vim')

"
" IDE related

call minpac#add('neoclide/coc.nvim', {'branch': 'release'} )  " All except C#
call minpac#add('OmniSharp/omnisharp-vim')  " For C# only
call minpac#add('sheerun/vim-polyglot')

" call minpac#add('prettier/vim-prettier')

" call minpac#add('neovim/nvim-lsp')
call minpac#add('scrooloose/nerdcommenter')
call minpac#add('tpope/vim-dispatch')
call minpac#add('radenling/vim-dispatch-neovim')
call minpac#add('tpope/vim-surround')
" call minpac#add('sirver/ultisnips')

call minpac#add('dense-analysis/ale')
"call minpac#add('Shougo/deoplete.nvim')
"call minpac#add('deoplete-plugins/deoplete-jedi')
"call minpac#add('Shougo/deoplete-clangx')
"call minpac#add('Shougo/echodoc.vim')
call minpac#add('honza/vim-snippets')

"call minpac#add('fsharp/vim-fsharp')

call minpac#add('majutsushi/tagbar')

" call minpac#add('autozimu/LanguageClient-neovim')

" call minpac#add('ycm-core/YouCompleteMe') " Not working right
" try https://github.com/prabirshrestha/vim-lsp

" call minpac#add('ncm2/float-preview.nvim') " didn't work
" TODO: Building https://github.com/neomake/neomake/wiki/Makers


call minpac#add('ledger/vim-ledger')


command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()


" VIM user interface  --------------------------------------------------- {{{1

" Set 7 lines to the cursor - when moving vertically using j/k
set scrolloff=7

" TODO:
" Avoid garbled characters in Chinese language windows OS
" let $LANG='en'  " Or else it changes locale for child shell (:!locale)
set langmenu=en

" source $VIMRUNTIME/delmenu.vim
" source $VIMRUNTIME/menu.vim

" Turn on the Wild menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hidden

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set matchtime=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500


" Add a bit extra margin to the left
set foldcolumn=1
set foldmethod=marker

" New window goes down. For preview-window to pop up at bottom.
set splitbelow

" New window goes right.
set splitright

" Preview window height
set previewheight=5


" Air line. Hide keymap:
let g:airline#extensions#keymap#enabled = 0


set statusline^=%{FugitiveStatusline()} 

"  Colors and Fonts --------------------------------------------------- {{{1

set guifont=DejaVu\ Sans\ Mono:h10
"set guifont=Source\ Code\ Pro:h10

" Enable syntax highlighting
syntax enable 

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


" Consider: 
" xoria256, zazen, yeller, dzo, sialoquent, dracula, zenburn,
" alduin
" baycomb
" mono colors: cake, candycode
" colorsbox-material
" MountinDew
" colorscheme alduin
colorscheme onehalfdark
" colorscheme onehalflight


" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions-=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set fileformats=unix,dos,mac


" Mapping to Increase font size: 
nnoremap <C-+> :silent! let &guifont = substitute(
            \ &guifont,
            \ ':h\zs\d\+',
            \ '\=eval(submatch(0)+1)',
            \ '')<CR>
nnoremap <C--> :silent! let &guifont = substitute(
            \ &guifont,
            \ ':h\zs\d\+',
            \ '\=eval(submatch(0)-1)',
            \ '')<CR>



"  Files, backups and undo --------------------------------------------------- {{{1


" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set noswapfile


"  Text, tab and indent related --------------------------------------------------- {{{1

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

set autoindent
set smartindent
set wrap "Wrap lines

" Linebreak on X characters
set textwidth=1000
set linebreak

" Make soft line breaks much better looking.
set breakindent

" Pretty soft break character.
let &showbreak = '> '


"  Visual mode relate --------------------------------------------------- {{{1

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>


"  Moving around, tabs, windows and buffers   --------------------------------------------------- {{{1

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


" Specify the behavior when switching between buffers 
try
  set switchbuf=useopen,usetab,newtab
  set showtabline=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

map <leader>cd :cd %:p:h<cr>:pwd<cr>

"  Editing mappings --------------------------------------------------- {{{1

" Remap VIM 0 to first non-blank character
map 0 ^

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif


"  Helper functions --------------------------------------------------- {{{1

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction

function! CmdLine(str)
    call feedkeys(":" . a:str)
endfunction 

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction



" Ledger --------------------------------------------------- {{{1

let g:ledger_bin='hledger'
let g:ledger_is_hledger=1
let g:ledger_main=$LEDGER_FILE


" UltiSnips --------------------------------------------------- {{{1

"let g:UltiSnipsSnippetDirectories=["pack/minpac/start/vim-snippets/UltiSnips", "my_snippets"]

"  ALE  --------------------------------------------------- {{{1

let g:ale_completion_enabled=0

"" Use ALE's function for omnicompletion.
"set omnifunc=ale#completion#OmniFunc

let g:ale_linters = {
     \ 'cs': ['omnisharp', 'mcs']
     \}

" Completion --------------------------------------------------- {{{1

" See ftplugin/python.vim
" See ftplugin/cs.vim
" See ftplugin/c.vim

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
"nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions.
"nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
"" Show commands.
"nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document.
"nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols.
"nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
"nnoremap <silent> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
"nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list.
"nnoremap <silent> <space>p  :<C-u>CocListResume<CR>



"" Show last method signature  
"let g:echodoc#enable_at_startup=1

"" Show help at the bottom.
"let g:echodoc#type='echo'


" OmniSharp will start automatically upon opening a `*.cs` file.
let g:OmniSharp_start_server = 1

" Use this to specify where the roslyn omnisharp server should be run from and downloaded to.
" let g:OmniSharp_server_install = '/home/art/.cache/omnisharp-vim/omnisharp-roslyn'
" let g:OmniSharp_server_path = '/home/art/bin/omnisharp/omnisharp/OmniSharp.exe'

" Use the stdio version of OmniSharp-roslyn:
let g:OmniSharp_server_stdio = 1

let g:OmniSharp_loglevel = 'info'

" Show loading message
let g:OmniSharp_server_display_loading = 1

let g:OmniSharp_selector_ui = 'fzf'

" Update semantic highlighting on BufEnter and InsertLeave
let g:OmniSharp_highlight_types = 3

" 
let g:OmniSharp_server_use_mono = 0

" Don't autoselect first omnicomplete option, show options even if there is only
" one (so the preview documentation is accessible). Remove 'preview' if you
" don't want to see any documentation whatsoever.
" set completeopt=longest,menuone,preview

let g:omnicomplete_fetch_full_documentation = 1


let g:OmniSharp_popup = 1



" VimWiki --------------------------------------------------- {{{1

" See ~/.config/nvim/ftplugin/vimwiki.vim

" Disable menu. See bug at https://github.com/vimwiki/vimwiki/issues/933
" let g:vimwiki_menu = ''

let g:vimwiki_use_mouse = 1


let g:vimwiki_folding = 'expr'
let g:vimwiki_toc_header = 'Содержание'
let g:vimwiki_auto_chdir = 1
let g:vimwiki_diary_months = {
      \ 1: 'Январь', 2: 'Февраль', 3: 'Март',
      \ 4: 'Апрель', 5: 'Май', 6: 'Июнь',
      \ 7: 'Июль', 8: 'Август', 9: 'Сентябрь',
      \ 10: 'Октябрь', 11: 'Ноябрь', 12: 'Декабрь'
      \ }

let g:vimwiki_global_ext = 0
let g:vimwiki_list = [ {
            \ 'path': '~/mydir/notes/', 
            \ 'path_html': '~/mydir/notes_html/',
            \ 'diary_rel_path': 'дневник/',
            \ 'diary_index': 'дневник',
            \ 'diary_header': 'Дневник',
            \ 'auto_diary_index': 1,
            \ 'auto_tags': 1,
            \ 'syntax': 'markdown', 
            \ 'custom_wiki2html': '~/mydir/notes/bin/wiki2html.sh',
            \ 'template_path': '~/mydir/notes/bin/',
            \ 'template_default': 'GitHub.html5',
            \ 'links_space_char': '_',
            \ 'ext': '.md' }]

au FileType vimwiki set syntax=markdown
au FileType vimwiki set foldlevel=3

" vim-airline --------------------------------------------------- {{{1

let g:airline_powerline_fonts = 1



" Goyo --------------------------------------------------- {{{1

function! s:goyo_enter()
    set noshowmode
    set noshowcmd
endfunction

function! s:goyo_leave()
    set showmode
    set showcmd
endfunction


" FZF --------------------------------------------------- {{{1

" Always enable preview window on the right with 60% width
let g:fzf_preview_window = 'right:60%'

nnoremap <C-p> :<C-u>Files<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

imap <c-x><c-f> <plug>(fzf-complete-path)

command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)


" i18n   --------------------------------------------------- {{{1

function! EnRuHighlight()
    if &iminsert == 0
        set iminsert=1
    else
        set iminsert=0
    endif
endfunction

set keymap=russian-jcukenwin    " настраиваем переключение раскладок клавиатуры по C-^
set iminsert=0                  " раскладка по умолчанию для ввода - английская
set imsearch=0                  " раскладка по умолчанию для поиска - английская

" {{{ swith language En-Ru
nmap <F3> <ESC>:call EnRuHighlight()<CR>
imap <F3> <ESC>:call EnRuHighlight()<CR>a
" }}}


"" Tmux integration --------------------------------------------------- {{{1


" Disable vim->tmux navigation when the Vim pane is zoomed in tmux
let g:tmux_navigator_disable_when_zoomed = 1

"
let g:tmux_navigator_disable_when_zoomed = 1

" Custom Key Bindings
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>


"" Other --------------------------------------------------- {{{1

" Filesnames for the tag command
set tags=tags;
"
" Regenerate tags when saving Python files.
" autocmd BufWritePost *.py *.cs silent! !ctags -R &


" Auto save when buffer lose focus
autocmd FocusLost,BufLeave * silent! wa

" Save on buffer change
set autowrite 

let g:pymode_python = 'python3'

autocmd BufRead * try | execute "compiler ".&filetype | catch /./ | endtry 

" Insert current date and time
" see http://www.cplusplus.com/reference/ctime/strftime/
nmap <F4> <C-R>=strftime("%Y-%m-%d %H:%M")<CR>
imap <F4> <C-R>=strftime("%Y-%m-%d %H:%M")<CR>

set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣

set sessionoptions-=options    " do not store global and local values in a session
set sessionoptions-=folds      " do not store folds

set modeline

